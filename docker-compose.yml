# We are using version 3 of docker-compose
version: "3"

# Services creation
services:
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: false
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - elastic
  logstash:
    image: logstash:8.9.0
    container_name: logstash
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5001:5000/tcp"
      - "5001:5000/udp"
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - elastic
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
  kibana:
    image: kibana:8.9.0
    container_name: kib
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elastic
  # Creation of MongoDB database service
  mongodb:
    # Using mongo official docker-hub image with a specific version
    image: mongo:7.0.0
    # Assign a name for the container
    container_name: mongodb
    # Service must restart even after a crash
    restart: always
    # Using environment variables
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    # Where to retrieve environment variables
    env_file:
      - .env
    # Data persistence with volume usage
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    # Port exposure (local:container)
    ports:
      - "27017:27017"
    # Using custom network
    networks:
      - server-database

  # Creation of React client service
  client:
    # From where the Dockerfile is located to build the image
    build:
      context: .
      dockerfile: ./client/Dockerfile
    # Where to retrieve environment variables
    env_file:
      - .env
    # Local volume and container synchronization
    volumes:
      - ./client:/client
    # Port exposure (local:container)
    ports:
      - "3000:3000"
    # The command to execute when the service is started
    # Here the packages are installed and the react-app is started
    command: >
      sh -c "npm install && npm run start"
    # Using custom network
    networks:
      - client-server

  # Creation of Express server service
  server:
    # Wait for the database service to run before starting up
    depends_on:
      - mongodb
    # From where the Dockerfile is located to build the image
    build:
      context: .
      dockerfile: ./server/Dockerfile
    # Where to retrieve environment variables
    env_file:
      - .env
    # Local volume and container synchronization
    volumes:
      - ./server:/server
    # Port exposure (local:container)
    ports:
      - "3001:3001"
    # The command to execute when the service is started
    # Here the packages are installed and the react-app is started in developer mode
    command: >
      sh -c "npm install && npm run dev"
    # Using custom network
    networks:
      - client-server
      - server-database

# Volumes saving
volumes:
  mongodb_data:

# Custom networks saving
networks:
  client-server:
    driver: bridge
  server-database:
   driver: bridge
  elastic:
   driver: bridge
